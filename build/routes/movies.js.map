{"version":3,"sources":["../../src/server/routes/movies.js"],"names":["movies","req","res","reqs","cinema","name","options","uri","headers","json","cachedMovieList","get","console","log","push","Observable","of","defer","then","movieList","put","timeout","retryWhen","errors","delay","moviesSource","forkJoin","movieDetailsSource","map","mergeAll","subscribe","result","err","error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAWA;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMC,OAAO,EAAb;AAD2B;AAAA;AAAA;;AAAA;AAAA;AAAA,UAEhBC,MAFgB;AAAA,UAGjBC,IAHiB,GAGRD,MAHQ,CAGjBC,IAHiB;;AAIzB,UAAMC,UAAU;AACdC,mCAAiBF,IAAjB,6BADc;AAEdG,iBAAS;AACP;AADO,SAFK;AAKdC,cAAM;AALQ,OAAhB;AAOA,UAAMC,kBAAkB,sBAAMC,GAAN,CAAUL,QAAQC,GAAlB,CAAxB;AACA,UAAI,gCAAwBG,eAA5B,EAA6C;AAC3CE,gBAAQC,GAAR,sCAA+CP,QAAQC,GAAvD,EAD2C,CACmB;AAC9DJ,aAAKW,IAAL,CAAU,eAAGC,UAAH,CAAcC,EAAd,CAAiBN,eAAjB,CAAV;AACD,OAHD,MAGO;AACLP,aAAKW,IAAL,CAAU,eAAGC,UAAH,CAAcE,KAAd,CACR;AAAA,iBAAM,oCAAGX,OAAH,EACHY,IADG,CAEF,UAACC,SAAD,EAAe;AACb,kCAAMC,GAAN,CAAUd,QAAQC,GAAlB,EAAuBY,SAAvB;AACA,mBAAOA,SAAP;AACD,WALC,CAAN;AAAA,SADQ,EAQPE,OARO,yBASPC,SATO,CASG,UAACC,MAAD,EAAY;AACrBX,kBAAQC,GAAR,uBAAgCP,QAAQC,GAAxC,aADqB,CACgC;AACrD,iBAAOgB,OAAOC,KAAP,sBAAP;AACD,SAZO,CAAV;AAcD;AA9BwB;;AAE3B,sKAA8B;AAAA;AA6B7B;AA/B0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgC3B,MAAMC,eAAe,eAAGV,UAAH,CAAcW,QAAd,CAAuBvB,IAAvB,CAArB;AACA,MAAMwB,qBAAqBF,aACxBG,GADwB,yCAExBC,QAFwB,GAGxBR,OAHwB,uBAA3B;AAIA,MAAMS,YAAYH,mBAAmBG,SAAnB,EAA6B;AAC7C,YAACC,MAAD,EAAY;AACV7B,QAAIO,IAAJ,CAASsB,MAAT;AACD,GAHe,EAIhB,UAACC,GAAD,EAAS;AACPpB,YAAQC,GAAR,8BAAuCmB,GAAvC,EADO,CACuC;AAC9C9B,QAAIO,IAAJ,CAAS,EAAEwB,OAAOD,GAAT,EAAT;AACD,GAPe,EAQhB,YAAM;AACJpB,YAAQC,GAAR,CAAY,4BAAZ,EADI,CACsC;AAC3C,GAVe,CAAlB;AAWD,CAhDD;kBAiDeb,M","file":"movies.js","sourcesContent":["import rp from 'request-promise-native';\nimport Rx from 'rxjs';\nimport cache from 'memory-cache';\nimport {\n  apiUrl,\n  cinemas,\n  moviesListEndpoint,\n  accessToken,\n  requestDelay,\n  requestTimeOut,\n  globalTimeout,\n  enableMovieListCache,\n  movieListCacheTimeout,\n} from '../config';\nimport movieDetailsObservableMapper from './movies/movieDetailsObservableMapper';\n\nconst movies = (req, res) => {\n  const reqs = [];\n  for (const cinema of cinemas) {\n    const { name } = cinema;\n    const options = {\n      uri: `${apiUrl}${name}${moviesListEndpoint}`,\n      headers: {\n        'x-access-token': accessToken,\n      },\n      json: true,\n    };\n    const cachedMovieList = cache.get(options.uri);\n    if (enableMovieListCache && cachedMovieList) {\n      console.log(`return cached cachedMovieList : ${options.uri}`);// eslint-disable-line no-console\n      reqs.push(Rx.Observable.of(cachedMovieList));\n    } else {\n      reqs.push(Rx.Observable.defer(\n        () => rp(options)\n          .then(\n            (movieList) => {\n              cache.put(options.uri, movieList, movieListCacheTimeout);\n              return movieList;\n            }\n          ))\n        .timeout(requestTimeOut)\n        .retryWhen((errors) => {\n          console.log(`fetch movie list-${options.uri} fails`);// eslint-disable-line no-console\n          return errors.delay(requestDelay);\n        })\n      );\n    }\n  }\n  const moviesSource = Rx.Observable.forkJoin(reqs);\n  const movieDetailsSource = moviesSource\n    .map(movieDetailsObservableMapper)\n    .mergeAll()\n    .timeout(globalTimeout);\n  const subscribe = movieDetailsSource.subscribe(// eslint-disable-line no-unused-vars\n    (result) => {\n      res.json(result);\n    },\n    (err) => {\n      console.log(`fetch movie list error: ${err}`);// eslint-disable-line no-console\n      res.json({ error: err });\n    },\n    () => {\n      console.log('fetch movie list complete!');// eslint-disable-line no-console\n    });\n};\nexport default movies;\n"]}